var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from 'aurelia-dependency-injection';
import { CameraEventAggregator, CameraEventType, Cartesian3, Quaternion, Matrix3, Matrix4, PerspectiveFrustum, CesiumMath } from '../cesium/cesium-imports';
import { Role, SerializedSubviewList } from '../common';
import { SessionService } from '../session';
import { decomposePerspectiveProjectionMatrix, getEntityPositionInReferenceFrame, getEntityOrientationInReferenceFrame } from '../utils';
import { ContextService, PoseStatus } from '../context';
import { DeviceService } from '../device';
import { ViewService } from '../view';
import { RealityViewer } from './base';
var EmptyRealityViewer = (function (_super) {
    __extends(EmptyRealityViewer, _super);
    function EmptyRealityViewer(sessionService, contextService, viewService, deviceService, uri) {
        var _this = _super.call(this, uri) || this;
        _this.sessionService = sessionService;
        _this.contextService = contextService;
        _this.viewService = viewService;
        _this.deviceService = deviceService;
        _this.uri = uri;
        _this.type = 'empty';
        _this._moveFlags = {
            moveForward: false,
            moveBackward: false,
            moveUp: false,
            moveDown: false,
            moveLeft: false,
            moveRight: false
        };
        function getFlagForKeyCode(keyCode) {
            switch (keyCode) {
                case 'W'.charCodeAt(0):
                    return 'moveForward';
                case 'S'.charCodeAt(0):
                    return 'moveBackward';
                case 'E'.charCodeAt(0):
                    return 'moveUp';
                case 'R'.charCodeAt(0):
                    return 'moveDown';
                case 'D'.charCodeAt(0):
                    return 'moveRight';
                case 'A'.charCodeAt(0):
                    return 'moveLeft';
                default:
                    return undefined;
            }
        }
        var keydownListener = function (e) {
            var flagName = getFlagForKeyCode(e.keyCode);
            if (typeof flagName !== 'undefined') {
                _this._moveFlags[flagName] = true;
            }
        };
        var keyupListener = function (e) {
            var flagName = getFlagForKeyCode(e.keyCode);
            if (typeof flagName !== 'undefined') {
                _this._moveFlags[flagName] = false;
            }
        };
        if (typeof document !== 'undefined') {
            _this.presentChangeEvent.addEventListener(function () {
                if (_this.isPresenting) {
                    if (!_this._aggregator && _this.viewService.element) {
                        _this.viewService.element['disableRootEvents'] = true;
                        _this._aggregator = new CameraEventAggregator(_this.viewService.element);
                        document.addEventListener('keydown', keydownListener, false);
                        document && document.addEventListener('keyup', keyupListener, false);
                    }
                }
                else {
                    _this._aggregator && _this._aggregator.destroy();
                    _this._aggregator = undefined;
                    document && document.removeEventListener('keydown', keydownListener);
                    document && document.removeEventListener('keyup', keyupListener);
                    for (var k in _this._moveFlags) {
                        _this._moveFlags[k] = false;
                    }
                }
            });
        }
        return _this;
    }
    EmptyRealityViewer.prototype.load = function () {
        var _this = this;
        var session = this.sessionService.addManagedSessionPort(this.uri);
        session.connectEvent.addEventListener(function () {
            _this.connectEvent.raiseEvent(session);
        });
        var internalSession = this.sessionService.createSessionPort(this.uri);
        internalSession.suppressErrorOnUnknownTopic = true;
        internalSession.connectEvent.addEventListener(function () {
            var scratchQuaternion = new Quaternion;
            var scratchQuaternionDragYaw = new Quaternion;
            // const pitchQuat = new Quaternion;
            var positionScratchCartesian = new Cartesian3;
            var movementScratchCartesian = new Cartesian3;
            var orientationMatrix = new Matrix3;
            var up = new Cartesian3(0, 0, 1);
            var right = new Cartesian3(1, 0, 0);
            var forward = new Cartesian3(0, -1, 0);
            var scratchFrustum = new PerspectiveFrustum();
            var deviceStage = _this.deviceService.stage;
            var deviceUser = _this.deviceService.user;
            var NEGATIVE_UNIT_Z = new Cartesian3(0, 0, -1);
            var X_90ROT = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, CesiumMath.PI_OVER_TWO);
            var subviews = [];
            var deviceUserPose = _this.contextService.createEntityPose(deviceUser, deviceStage);
            var subscribedGeolocation = false;
            var remove = _this.deviceService.frameStateEvent.addEventListener(function (frameState) {
                if (internalSession.isClosed)
                    return;
                var aggregator = _this._aggregator;
                var flags = _this._moveFlags;
                if (!_this.isPresenting) {
                    aggregator && aggregator.reset();
                    return;
                }
                if (frameState.geolocationDesired) {
                    if (!subscribedGeolocation) {
                        subscribedGeolocation = true;
                        _this.deviceService.subscribeGeolocation(frameState.geolocationOptions, internalSession);
                    }
                }
                else {
                    if (subscribedGeolocation) {
                        subscribedGeolocation = false;
                        _this.deviceService.unsubscribeGeolocation(internalSession);
                    }
                }
                SerializedSubviewList.clone(frameState.subviews, subviews);
                // provide fov controls
                if (!frameState.strict) {
                    decomposePerspectiveProjectionMatrix(subviews[0].projectionMatrix, scratchFrustum);
                    scratchFrustum.fov = _this.viewService.subviews[0].frustum.fov;
                    if (aggregator && aggregator.isMoving(CameraEventType.WHEEL)) {
                        var wheelMovement = aggregator.getMovement(CameraEventType.WHEEL);
                        var diff = wheelMovement.endPosition.y;
                        scratchFrustum.fov = Math.min(Math.max(scratchFrustum.fov - diff * 0.02, Math.PI / 8), Math.PI - Math.PI / 8);
                    }
                    if (aggregator && aggregator.isMoving(CameraEventType.PINCH)) {
                        var pinchMovement = aggregator.getMovement(CameraEventType.PINCH);
                        var diff = pinchMovement.distance.endPosition.y - pinchMovement.distance.startPosition.y;
                        scratchFrustum.fov = Math.min(Math.max(scratchFrustum.fov - diff * 0.02, Math.PI / 8), Math.PI - Math.PI / 8);
                    }
                    subviews.forEach(function (s) {
                        var aspect = s.viewport.width / s.viewport.height;
                        scratchFrustum.aspectRatio = isFinite(aspect) ? aspect : 1;
                        Matrix4.clone(scratchFrustum.projectionMatrix, s.projectionMatrix);
                    });
                }
                var time = frameState.time;
                deviceUserPose.update(time);
                var overrideUser = !(deviceUserPose.status & PoseStatus.KNOWN);
                // provide controls if the device does not have a physical pose
                if (overrideUser) {
                    var contextUser = _this.contextService.user;
                    var contextStage = _this.contextService.stage;
                    var position = getEntityPositionInReferenceFrame(contextUser, time, contextStage, positionScratchCartesian) ||
                        Cartesian3.clone(Cartesian3.ZERO, positionScratchCartesian);
                    var orientation_1 = getEntityOrientationInReferenceFrame(contextUser, time, contextStage, scratchQuaternion) ||
                        Quaternion.clone(X_90ROT, scratchQuaternion);
                    if (aggregator && aggregator.isMoving(CameraEventType.LEFT_DRAG)) {
                        var dragMovement = aggregator.getMovement(CameraEventType.LEFT_DRAG);
                        if (orientation_1) {
                            // const dragPitch = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, frustum.fov * (dragMovement.endPosition.y - dragMovement.startPosition.y) / app.view.getViewport().height, scratchQuaternionDragPitch);
                            var dragYaw = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, scratchFrustum.fov * (dragMovement.endPosition.x - dragMovement.startPosition.x) / frameState.viewport.width, scratchQuaternionDragYaw);
                            // const drag = Quaternion.multiply(dragPitch, dragYaw, dragYaw);
                            orientation_1 = Quaternion.multiply(orientation_1, dragYaw, dragYaw);
                            contextUser.orientation.setValue(orientation_1);
                        }
                    }
                    Matrix3.fromQuaternion(orientation_1, orientationMatrix);
                    Matrix3.multiplyByVector(orientationMatrix, Cartesian3.UNIT_Y, up);
                    Matrix3.multiplyByVector(orientationMatrix, Cartesian3.UNIT_X, right);
                    Matrix3.multiplyByVector(orientationMatrix, NEGATIVE_UNIT_Z, forward);
                    var moveRate = 0.02;
                    if (flags.moveForward) {
                        Cartesian3.multiplyByScalar(forward, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveBackward) {
                        Cartesian3.multiplyByScalar(forward, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveUp) {
                        Cartesian3.multiplyByScalar(up, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveDown) {
                        Cartesian3.multiplyByScalar(up, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveLeft) {
                        Cartesian3.multiplyByScalar(right, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveRight) {
                        Cartesian3.multiplyByScalar(right, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    contextUser.position.setValue(position, contextStage);
                    contextUser.orientation.setValue(orientation_1);
                }
                aggregator && aggregator.reset();
                var contextFrameState = _this.deviceService.createContextFrameState(time, frameState.viewport, subviews, { overrideUser: overrideUser });
                internalSession.send('ar.reality.frameState', contextFrameState);
            });
            internalSession.closeEvent.addEventListener(function () {
                remove();
            });
        });
        // Only connect after the caller is able to attach connectEvent handlers
        Promise.resolve().then(function () {
            if (_this.sessionService.manager.isClosed)
                return;
            var messageChannel = _this.sessionService.createSynchronousMessageChannel();
            session.open(messageChannel.port1, _this.sessionService.configuration);
            internalSession.open(messageChannel.port2, { role: Role.REALITY_VIEWER, uri: _this.uri, title: 'Empty', version: _this.sessionService.configuration.version });
        });
    };
    return EmptyRealityViewer;
}(RealityViewer));
EmptyRealityViewer = __decorate([
    inject(SessionService, ContextService, ViewService, DeviceService),
    __metadata("design:paramtypes", [SessionService,
        ContextService,
        ViewService,
        DeviceService, String])
], EmptyRealityViewer);
export { EmptyRealityViewer };
